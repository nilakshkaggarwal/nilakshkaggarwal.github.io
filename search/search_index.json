{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"IBPL Quick Reference Guide This guide has been designed to minimise the search time for the required for IBPL Queries as well as keeping in mind the needs for new users Headers Introduction: This section contains basic introduction about IBPL and its some basic syntax. It is must read for new users Terminology: This section briefly describe the terms frequently used in Graphcube Server","title":"Home"},{"location":"#ibpl-quick-reference-guide","text":"This guide has been designed to minimise the search time for the required for IBPL Queries as well as keeping in mind the needs for new users Headers Introduction: This section contains basic introduction about IBPL and its some basic syntax. It is must read for new users Terminology: This section briefly describe the terms frequently used in Graphcube Server","title":"IBPL Quick Reference Guide"},{"location":"Operation/Arithmetic/","text":"Arithmetic Operators An arithmetic operator is a mathematical function that takes two operands and performs a calculation on them. The arithmetic operators supported in IBPL include: addition (+), subtraction (-), multiplication (*), division (/), power (^). They each accept two numeric values as input and return a numeric value. IBPL follows BODMAS calculation Addition The addition operator produces the sum of numeric operands or string concatenation.The Addition Operator is the plus sign (+) Example: select ( 5 + 3 ); result = 8 Example: Select ( Version .[ Version Name ] * Product .[ ProductID ] * { Measure .[ UnitPrice ], ( Measure .[ UnitPrice ] + 1000 ) as Transient . NewUnitPrice } ); result = one thousand added to unit price Explaination: Vesrion Name ProducrID UnitPrice NewUnitPrice CurrentWorkingView FUR-BO-10001798 10,858 11,858 CurrentWorkingView FUR-BO-10002545 10,671 11,671 CurrentWorkingView FUR-BO-10002613 19,458 20,458 Subtraction The subtraction operator subtracts the two operands, producing their difference.The Subtraction Operator is the minus sign (-) Example: select ( 5 - 3 ) result = 2 Exampe: Select ( Version .[ Version Name ] * Product .[ ProductID ] * { Measure .[ UnitPrice ], ( Measure .[ UnitPrice ] - 1000 ) as Transient . NewUnitPrice } ); result = one thousand is subtracted from unit price Explaination: Vesrion Name ProducrID UnitPrice NewUnitPrice CurrentWorkingView FUR-BO-10001798 10,858 9,858 CurrentWorkingView FUR-BO-10002545 10,671 9,671 CurrentWorkingView FUR-BO-10002613 19,458 18,458 Example: Select ( Version .[ Version Name ] * Product .[ ProductID ] * { ( Measure .[ UnitPrice ] - Measure .[ UnitCost ]) as Transient . Profit } ); result = difference between unit price and unit cost Explaination: Vesrion Name ProducrID UnitPrice UnitCost Profit CurrentWorkingView FUR-BO-10001798 10,858 10,000 858 CurrentWorkingView FUR-BO-10002545 10,671 8,000 2,671 CurrentWorkingView FUR-BO-10002613 19,458 18,000 1,458 Note:while adding or subtracting measures, if a measure has a null value, then the result of the opeartion will be null. To avoid this, user should use the Coalesce() function to take the non null values. Multiplication The multiplication operator produces the product of the operands.The Multiplication Operator is the asterisk (*) Example: Select ( 5 * 3 ); result = 15 Example: Select ( Version .[ Version Name ] * Product .[ ProductID ] * { Measure [ UnitPrice ], ( Measure .[ UnitPrice ] * 100 ) as Transient . NewUnitPrice } ); result = one hundred times unit price Explaination: Vesrion Name ProducrID UnitPrice NewUnitPrice CurrentWorkingView FUR-BO-10001798 10,858 10,85,800 CurrentWorkingView FUR-BO-10002545 10,671 10,67,100 CurrentWorkingView FUR-BO-10002613 19,458 19,45,800 Example: Select ( Version .[ Version Name ] * Product .[ ProductID ] * { Measure .[ UnitPrice ], Meaure [ UnitSold ], ( Measure .[ UnitPrice ] * Measure .[ UnitSold ]) as Transient . PriceTimesUnitSold } ); result = product of unit sold and unit price Explaination: Version Name ProductID UnitPrice UnitSold PriceTimesUnitSold CurrentWorkingView FUR-BO-10001798 10,858 3 32,573 CurrentWorkingView FUR-BO-10002545 10,671 1 10,671 CurrentWorkingView FUR-BO-10002613 19,458 3 58,374 Division The Division Operator is the asterisk (/). Example: Select ( 5 / 3 ); result = 1.6666666667 Example: Select ( Version .[ Version Name ] * Product .[ ProductID ] * { ( Measure .[ UnitPrice ] / 100 ) as Transient . NewUnitPrice } ); result = unit price divided by one hundred Explanation: Vesrion Name ProducrID UnitPrice NewUnitPrice CurrentWorkingView FUR-BO-10001798 10,858 109 CurrentWorkingView FUR-BO-10002545 10,671 107 CurrentWorkingView FUR-BO-10002613 19,458 195 Example: Select ( Version .[ Version Name ] * Product .[ ProductID ] * { Measure .[ UnitPrice ], Measure .[ UnitCost ], ( Measure .[ UnitPrice ] / Measure .[ UnitCost ]) as Transient . PriceRatioCost } ); result = ratio of unit price to unit cost Note:when dividing measures, if a measure has a null value, then the return value of the Division Operator will be null. Also, if the divisor is equal to zero, this will cause an error. To avoid this, you should use the if/then/else function to check whether the divisor is non-zero. Power The Power Operator is the caret symbol (^). It raises the first input to the power of the second input and returns the result as a number. Example: Select ( 5 ^ 3 ); result=125 Example: Select ( Version .[ Version Name ] * Product .[ ProductID ] * { ( Measure .[ UnitPrice ] ^ 2 ) as Transient . PricePower2 } ); result = Unit price is squared Example: Select ( Version .[ Version Name ] * Product .[ ProductID ] * { ( Measure .[ UnitPrice ] ^ Measure .[ UnitCost ]) as Transient . PricePowerCost } ); result = Unit price raised to the power of unit cost String Operators Concatenation The Concatenation Operator is the plus sign (+). It is used to concatenate two strings. For example, \"Web\" + \"COD\" In this example, the two strings are combined and the return value is the single string \u201cWebCOD\u201d.","title":"Arithmetic"},{"location":"Operation/Arithmetic/#arithmetic-operators","text":"An arithmetic operator is a mathematical function that takes two operands and performs a calculation on them. The arithmetic operators supported in IBPL include: addition (+), subtraction (-), multiplication (*), division (/), power (^). They each accept two numeric values as input and return a numeric value. IBPL follows BODMAS calculation","title":"Arithmetic Operators"},{"location":"Operation/Arithmetic/#addition","text":"The addition operator produces the sum of numeric operands or string concatenation.The Addition Operator is the plus sign (+) Example: select ( 5 + 3 ); result = 8 Example: Select ( Version .[ Version Name ] * Product .[ ProductID ] * { Measure .[ UnitPrice ], ( Measure .[ UnitPrice ] + 1000 ) as Transient . NewUnitPrice } ); result = one thousand added to unit price Explaination: Vesrion Name ProducrID UnitPrice NewUnitPrice CurrentWorkingView FUR-BO-10001798 10,858 11,858 CurrentWorkingView FUR-BO-10002545 10,671 11,671 CurrentWorkingView FUR-BO-10002613 19,458 20,458","title":"Addition"},{"location":"Operation/Arithmetic/#subtraction","text":"The subtraction operator subtracts the two operands, producing their difference.The Subtraction Operator is the minus sign (-) Example: select ( 5 - 3 ) result = 2 Exampe: Select ( Version .[ Version Name ] * Product .[ ProductID ] * { Measure .[ UnitPrice ], ( Measure .[ UnitPrice ] - 1000 ) as Transient . NewUnitPrice } ); result = one thousand is subtracted from unit price Explaination: Vesrion Name ProducrID UnitPrice NewUnitPrice CurrentWorkingView FUR-BO-10001798 10,858 9,858 CurrentWorkingView FUR-BO-10002545 10,671 9,671 CurrentWorkingView FUR-BO-10002613 19,458 18,458 Example: Select ( Version .[ Version Name ] * Product .[ ProductID ] * { ( Measure .[ UnitPrice ] - Measure .[ UnitCost ]) as Transient . Profit } ); result = difference between unit price and unit cost Explaination: Vesrion Name ProducrID UnitPrice UnitCost Profit CurrentWorkingView FUR-BO-10001798 10,858 10,000 858 CurrentWorkingView FUR-BO-10002545 10,671 8,000 2,671 CurrentWorkingView FUR-BO-10002613 19,458 18,000 1,458 Note:while adding or subtracting measures, if a measure has a null value, then the result of the opeartion will be null. To avoid this, user should use the Coalesce() function to take the non null values.","title":"Subtraction"},{"location":"Operation/Arithmetic/#multiplication","text":"The multiplication operator produces the product of the operands.The Multiplication Operator is the asterisk (*) Example: Select ( 5 * 3 ); result = 15 Example: Select ( Version .[ Version Name ] * Product .[ ProductID ] * { Measure [ UnitPrice ], ( Measure .[ UnitPrice ] * 100 ) as Transient . NewUnitPrice } ); result = one hundred times unit price Explaination: Vesrion Name ProducrID UnitPrice NewUnitPrice CurrentWorkingView FUR-BO-10001798 10,858 10,85,800 CurrentWorkingView FUR-BO-10002545 10,671 10,67,100 CurrentWorkingView FUR-BO-10002613 19,458 19,45,800 Example: Select ( Version .[ Version Name ] * Product .[ ProductID ] * { Measure .[ UnitPrice ], Meaure [ UnitSold ], ( Measure .[ UnitPrice ] * Measure .[ UnitSold ]) as Transient . PriceTimesUnitSold } ); result = product of unit sold and unit price Explaination: Version Name ProductID UnitPrice UnitSold PriceTimesUnitSold CurrentWorkingView FUR-BO-10001798 10,858 3 32,573 CurrentWorkingView FUR-BO-10002545 10,671 1 10,671 CurrentWorkingView FUR-BO-10002613 19,458 3 58,374","title":"Multiplication"},{"location":"Operation/Arithmetic/#division","text":"The Division Operator is the asterisk (/). Example: Select ( 5 / 3 ); result = 1.6666666667 Example: Select ( Version .[ Version Name ] * Product .[ ProductID ] * { ( Measure .[ UnitPrice ] / 100 ) as Transient . NewUnitPrice } ); result = unit price divided by one hundred Explanation: Vesrion Name ProducrID UnitPrice NewUnitPrice CurrentWorkingView FUR-BO-10001798 10,858 109 CurrentWorkingView FUR-BO-10002545 10,671 107 CurrentWorkingView FUR-BO-10002613 19,458 195 Example: Select ( Version .[ Version Name ] * Product .[ ProductID ] * { Measure .[ UnitPrice ], Measure .[ UnitCost ], ( Measure .[ UnitPrice ] / Measure .[ UnitCost ]) as Transient . PriceRatioCost } ); result = ratio of unit price to unit cost Note:when dividing measures, if a measure has a null value, then the return value of the Division Operator will be null. Also, if the divisor is equal to zero, this will cause an error. To avoid this, you should use the if/then/else function to check whether the divisor is non-zero.","title":"Division"},{"location":"Operation/Arithmetic/#power","text":"The Power Operator is the caret symbol (^). It raises the first input to the power of the second input and returns the result as a number. Example: Select ( 5 ^ 3 ); result=125 Example: Select ( Version .[ Version Name ] * Product .[ ProductID ] * { ( Measure .[ UnitPrice ] ^ 2 ) as Transient . PricePower2 } ); result = Unit price is squared Example: Select ( Version .[ Version Name ] * Product .[ ProductID ] * { ( Measure .[ UnitPrice ] ^ Measure .[ UnitCost ]) as Transient . PricePowerCost } ); result = Unit price raised to the power of unit cost","title":"Power"},{"location":"Operation/Arithmetic/#string-operators","text":"Concatenation The Concatenation Operator is the plus sign (+). It is used to concatenate two strings. For example, \"Web\" + \"COD\" In this example, the two strings are combined and the return value is the single string \u201cWebCOD\u201d.","title":"String Operators"},{"location":"Operation/Logical/","text":"Logical operators These operators are used to perform logical operations on any required given expressions.The binary logical operators supported in IBPL include AND (&&) and OR (||). Logical AND(&&) The Logical And Operator is represented by two ampersands (&&). It returns a true value if both of the input expressions evaluate to true, and returns false if either expression evaluates to false. Example: Example Result Select((1>0)&&(1<2)); true Select((1<0)&&(1<2)); false Example: select ( Version .[ Version Name ] * Product .[ ProductID ] * { Measure .[ UnitPrice ], Measure .[ UnitCost ], ( Measure .[ UnitPrice ] < 12000 && Measure .[ Unitprice ] > Measure .[ UnitCost ]) as Transient . Result } ); result: Version Name ProductID UnitPrice UnitCost Result CurrentWorkingView FUR-BO-10001798 10,857.63 10,000.00 true CurrentWorkingView FUR-BO-10002545 10,671.23 8,000.00 true CurrentWorkingView FUR-BO-10002613 19,457.96 18,000.00 false CurrentWorkingView FUR-BO-10004695 15,274.25 15,000.00 false CurrentWorkingView FUR-CH-10000454 578.92 500.00 true Logical OR(||) The Logical Or Operator is represented by vertical bars (||). It returns a true value if either of the input expressions evaluate to true, and returns false only if both expressions evaluate to false. Example: Example Result Select((1>0) Select((1<0) select ( Version .[ Version Name ] * Product .[ ProductID ] * { Measure .[ UnitPrice ], measure .[ UnitCost ], ( Measure .[ UnitPrice ] < 12000 || Measure .[ Unitprice ] > measure .[ UnitCost ]) as Transient . Result } ); result: Version Name ProductID UnitPrice UnitCost Result CurrentWorkingView FUR-BO-10001798 10,857.63 10,000.00 true CurrentWorkingView FUR-BO-10002545 10,671.23 8,000.00 true CurrentWorkingView FUR-BO-10002613 19,457.96 18,000.00 true CurrentWorkingView FUR-BO-10004695 15,274.25 15,000.00 true CurrentWorkingView FUR-CH-10000454 578.92 500.00 true Example: ( Select ( Version .[ Version Name ] * Customer .[ CustomerID ] * { Measure .[ UnitSold ], Measure .[ PaymentMode ], Measure .[ OrderMode ] } )). filter ( Measure .[ PaymentMode ] == [ COD ] || Measure .[ PaymentMode ] == [ Credit Card ]); result: Version Name CustomerID UnitSold PaymentMode OrderMode CurrentWorkingView AA-10480 21 Credit Card Web CurrentWorkingView AD-10180 4 Credit Card Web CurrentWorkingView AG-10270 4 COD E-mail CurrentWorkingView AM-10360 4 Credit Card Web Logical IN Example: select ( Version .[ Version Name ] * Product .[ ProductID ] * Order .[ OrderID ] * Customer .[ City ]. filter ( # . Name in { [ Mumbai ],[ Kanpur ] } ) * { Measure .[ UnitSold ], Measure .[ UnitPrice ]); result: Version Name ProductID CustomerID City UnitSold UnitPrice CurrentWorkingView FUR-CH-10003061 101117837 Mumbai 1 337.46 CurrentWorkingView FUR-FU-10001706 101117837 Mumbai 1 85,338.28 CurrentWorkingView OFF-AR-10000940 102443921 Kanpur 3 1,272.84 CurrentWorkingView OFF-BI-10001721 101489913 Kanpur 2 52.80 Example: ( Select ( Version .[ Version Name ] * Customer .[ CustomerID ] * { Measure .[ UnitSold ], Measure .[ PaymentMode ], Measure .[ OrderMode ] } )). filter ( Measure .[ PaymentMode ] in { [ COD ], [ Credit Card ] } ); result: Version Name CustomerID UnitSold PaymentMode OrderMode CurrentWorkingView AA-10480 21 Credit Card Web CurrentWorkingView AD-10180 4 Credit Card Web CurrentWorkingView AG-10270 4 COD E-mail CurrentWorkingView AM-10360 4 Credit Card Web Logical Not (~) The Logical Not Operator is represented by Tilda (~). Example: ( Select ( Version .[ Version Name ] * Customer .[ CustomerID ] * { Measure .[ UnitSold ], Measure .[ PaymentMode ], Measure .[ OrderMode ], Measure .[ DeliveryMode ] } )). filter ( ~ ( Measure .[ PaymentMode ] in { [ COD ], [ Credit Card ] } ) && Measure .[ DeliveryMode ] in { [ 2 Day delivery ],[ Standard Delivery ] } ); result: Version Name CustomerID UnitSold PaymentMode OrderMode DeliveryMode CurrentWorkingView DN-13690 15 Debit Card Web Standard Delivery CurrentWorkingView HM-14980 3 Debit Card App Standard Delivery CurrentWorkingView IM-15070 4 Debit Card E-mail Standard Delivery CurrentWorkingView JS-15685 13 Debit Card Web 2 Day delivery","title":"Logical"},{"location":"Operation/Logical/#logical-operators","text":"These operators are used to perform logical operations on any required given expressions.The binary logical operators supported in IBPL include AND (&&) and OR (||).","title":"Logical operators"},{"location":"Operation/Logical/#logical-and","text":"The Logical And Operator is represented by two ampersands (&&). It returns a true value if both of the input expressions evaluate to true, and returns false if either expression evaluates to false. Example: Example Result Select((1>0)&&(1<2)); true Select((1<0)&&(1<2)); false Example: select ( Version .[ Version Name ] * Product .[ ProductID ] * { Measure .[ UnitPrice ], Measure .[ UnitCost ], ( Measure .[ UnitPrice ] < 12000 && Measure .[ Unitprice ] > Measure .[ UnitCost ]) as Transient . Result } ); result: Version Name ProductID UnitPrice UnitCost Result CurrentWorkingView FUR-BO-10001798 10,857.63 10,000.00 true CurrentWorkingView FUR-BO-10002545 10,671.23 8,000.00 true CurrentWorkingView FUR-BO-10002613 19,457.96 18,000.00 false CurrentWorkingView FUR-BO-10004695 15,274.25 15,000.00 false CurrentWorkingView FUR-CH-10000454 578.92 500.00 true","title":"Logical AND(&amp;&amp;)"},{"location":"Operation/Logical/#logical-or","text":"The Logical Or Operator is represented by vertical bars (||). It returns a true value if either of the input expressions evaluate to true, and returns false only if both expressions evaluate to false. Example: Example Result Select((1>0) Select((1<0) select ( Version .[ Version Name ] * Product .[ ProductID ] * { Measure .[ UnitPrice ], measure .[ UnitCost ], ( Measure .[ UnitPrice ] < 12000 || Measure .[ Unitprice ] > measure .[ UnitCost ]) as Transient . Result } ); result: Version Name ProductID UnitPrice UnitCost Result CurrentWorkingView FUR-BO-10001798 10,857.63 10,000.00 true CurrentWorkingView FUR-BO-10002545 10,671.23 8,000.00 true CurrentWorkingView FUR-BO-10002613 19,457.96 18,000.00 true CurrentWorkingView FUR-BO-10004695 15,274.25 15,000.00 true CurrentWorkingView FUR-CH-10000454 578.92 500.00 true Example: ( Select ( Version .[ Version Name ] * Customer .[ CustomerID ] * { Measure .[ UnitSold ], Measure .[ PaymentMode ], Measure .[ OrderMode ] } )). filter ( Measure .[ PaymentMode ] == [ COD ] || Measure .[ PaymentMode ] == [ Credit Card ]); result: Version Name CustomerID UnitSold PaymentMode OrderMode CurrentWorkingView AA-10480 21 Credit Card Web CurrentWorkingView AD-10180 4 Credit Card Web CurrentWorkingView AG-10270 4 COD E-mail CurrentWorkingView AM-10360 4 Credit Card Web","title":"Logical OR(||)"},{"location":"Operation/Logical/#logical-in","text":"Example: select ( Version .[ Version Name ] * Product .[ ProductID ] * Order .[ OrderID ] * Customer .[ City ]. filter ( # . Name in { [ Mumbai ],[ Kanpur ] } ) * { Measure .[ UnitSold ], Measure .[ UnitPrice ]); result: Version Name ProductID CustomerID City UnitSold UnitPrice CurrentWorkingView FUR-CH-10003061 101117837 Mumbai 1 337.46 CurrentWorkingView FUR-FU-10001706 101117837 Mumbai 1 85,338.28 CurrentWorkingView OFF-AR-10000940 102443921 Kanpur 3 1,272.84 CurrentWorkingView OFF-BI-10001721 101489913 Kanpur 2 52.80 Example: ( Select ( Version .[ Version Name ] * Customer .[ CustomerID ] * { Measure .[ UnitSold ], Measure .[ PaymentMode ], Measure .[ OrderMode ] } )). filter ( Measure .[ PaymentMode ] in { [ COD ], [ Credit Card ] } ); result: Version Name CustomerID UnitSold PaymentMode OrderMode CurrentWorkingView AA-10480 21 Credit Card Web CurrentWorkingView AD-10180 4 Credit Card Web CurrentWorkingView AG-10270 4 COD E-mail CurrentWorkingView AM-10360 4 Credit Card Web","title":"Logical IN"},{"location":"Operation/Logical/#logical-not","text":"The Logical Not Operator is represented by Tilda (~). Example: ( Select ( Version .[ Version Name ] * Customer .[ CustomerID ] * { Measure .[ UnitSold ], Measure .[ PaymentMode ], Measure .[ OrderMode ], Measure .[ DeliveryMode ] } )). filter ( ~ ( Measure .[ PaymentMode ] in { [ COD ], [ Credit Card ] } ) && Measure .[ DeliveryMode ] in { [ 2 Day delivery ],[ Standard Delivery ] } ); result: Version Name CustomerID UnitSold PaymentMode OrderMode DeliveryMode CurrentWorkingView DN-13690 15 Debit Card Web Standard Delivery CurrentWorkingView HM-14980 3 Debit Card App Standard Delivery CurrentWorkingView IM-15070 4 Debit Card E-mail Standard Delivery CurrentWorkingView JS-15685 13 Debit Card Web 2 Day delivery","title":"Logical Not (~)"},{"location":"Operation/relational/","text":"Relational Operators A relational operator checks the relationship between two operands. The relational operators supported in IBPL include Equal (==), NotEqual (!=), LessThan (<), LessThanOrEqual (<=), GreaterThan (>), and GreaterThanOrEqual (>=).They each accept two value expressions as input and return a logical value. The inputs can be of type date, number or string. Equal(==) The Equal Operator is represented by two equal signs (==). It accepts two inputs and returns true if they are the same, and false otherwise. Single equal to (=) is an assignment operator. So when you write a=b (instead of a==b ). It tries to assign the value stored in b to a instead of comparing both. When it is used in an argument expecting boolean results the query fails as a=b doesn't give boolean result. Example Result Select(1==1); true Select(1==2); false Select(\"String\"==\"String\"); true Select(\"String\"==\"String1\"); false Example: select ( 1 . 0 ) == \"1\" ; result= true Explaination: 1.0 is stored as a integer 1 and it is converted into string \"1\" before comparison Example: select ( 1 . 0 ) == \"1.0\" ; reult= false Explaination:Conversion of number to string removes the extraneous zero and decimal point. Example: select ( Version .[ Version Name ] * Product .[ ProductID ] * { Measure .[ UnitPrice ], ( Measure .[ UnitPrice ] == Measure .[ UnitPrice ]) as Transient . Result } ); result=true Explaination Version Name ProductID UnitPrice Result CurrentWorkingView FUR-BO-10001798 10,858 true CurrentWorkingView FUR-BO-10002545 10,671 true CurrentWorkingView FUR-BO-10002613 19,458 true Example: select ( Version .[ Version Name ] * Product .[ ProductID ] * { Measure .[ UnitPrice ], Measure .[ UnitCost ], ( Measure .[ UnitPrice ] == Measure .[ UnitCost ]) as Transient . Result } ); result: Version Name ProductID UnitPrice UnitCost Result CurrentWorkingView FUR-BO-10001798 10,858 10,000 false CurrentWorkingView FUR-BO-10002545 10,671 8,000 false CurrentWorkingView FUR-BO-10002613 19,458 18,000 false CurrentWorkingView FUR-BO-10004695 15,274 15,000 false CurrentWorkingView FUR-BO-10004834 12,091 12,000 false select ToDateTime ( \"08/27/2018 08:30PM\" ) == \"2018-08-27T20:30\" ; result=true Explaination:ToDateTime() function converts a string representing a date into a date value S.No. ToDateTime() Argument Comparison String Result 1 08/27/2018 2018-08-27T20:30 false 2 08/27/2018 08:30PM 2018-08-27 false 3 2018-08-27 2018-08-27T00:00 true 4 18-08-27 2018-08-27T00:00 ERROR! 5 27-08-2018 2018-08-27T00:00 ERROR! 6 27-Aug-2018 2018-08-27T00:00 true 7 August 27 2018 08:30 PM 2018-08-27T20:30 true Explanation If no time is mentioned ToDateTime takes time to be 00:00 Comparison string should be in the format yyyy-MM-ddThh:mm Year is written as yyyy thats why it recognise it to be year Server tries to map first no. to be month if its a 2 digit no. Server tries to map first no. to be month if its a 2 digit no. and it finds no mention of the month in words Since month has been written verbally Not Equal (!=) The Not Equal Operator is represented by exclamatory and an equal sign (!=). It accepts two inputs and returns false if they are the same, and true otherwise.(<>) can also be used as the NotEqual operator. Example Result Select(1!=1); false Select(1!=2); true Select(\"String\"!=\"String\"); false Select(\"String\"!=\"String1\"); true Example: Select ( 1 . 0 ) != \"1\" ; result=false Explaination: 1.0 is converted into string eqaul to \"1\" Example: Select ( 1 . 0 ) != \"1.0\" ; result=true Explaination: Conversion of number to string removes the extraneous zero and decimal point. Example: select ( Version .[ Version Name ] * Product .[ ProductID ] * { ( Measure .[ UnitPrice ] != Measure .[ UnitPrice ]) as Transient . Result } ); result: Version Name ProductID UnitPrice Result CurrentWorkingView FUR-BO-10001798 10,857.63 false CurrentWorkingView FUR-BO-10002545 10,671.23 false CurrentWorkingView FUR-BO-10002613 19,457.96 false Example: select ( Version .[ Version Name ] * Product .[ ProductID ] * { Measure .[ UnitPrice ], Measure .[ UnitCost ], ( Measure .[ UnitPrice ] != Measure .[ UnitCost ]) as Transient . Result } ); result: Explaination: Version Name ProductID UnitPrice UnitCost Result CurrentWorkingView FUR-BO-10001798 10,858 10,000 true CurrentWorkingView FUR-BO-10002545 10,671 8,000 true CurrentWorkingView FUR-BO-10002613 19,458 18,000 true CurrentWorkingView FUR-BO-10004695 15,274 15,000 true CurrentWorkingView FUR-BO-10004834 12,091 12,000 true Example: select ToDateTime ( \"08/27/2018 08:30PM\" ) != \"2018-08-27T08:30\" ; result=true Explaination:ToDateTime() function converts a string representing a date into a date value.so input 08/27/2018 08:30PM will give the result 2018-08-27T20:30 and not 2018-08-27T08:30 . Less Than(<) The less than operand is represented by (<) sign. It accepts two inputs and returns true if the first is strictly less than the second, and false otherwise. Example Result Select(1<1); false Select(1<2); true Select(\"String\"<\"String\") false Select(\"String<\"String1\") true Example Select ( 1 . 0 ) < \"1\" ; result= false Explaination: 1.0 is converted to a string equal to 1 which in case can not be less than 1. Example: select ( 11 ) < \"2\" ; result= true Explaination: the number is converted to the string \u201c11\u201d which is less than \u201c2\u201d) Example: select ( Version .[ Version Name ] * Product .[ ProductID ] * { Measure .[ UnitPrice ], ( Measure .[ UnitPrice ] < 8000 ) as Transient . Result } ); result: Version Name ProductID UnitPrice Result CurrentWorkingView FUR-BO-10001798 10,857.63 false CurrentWorkingView FUR-BO-10002545 10,671.23 false CurrentWorkingView FUR-CH-10000454 578.92 true CurrentWorkingView FUR-CH-10000513 964.06 true CurrentWorkingView FUR-CH-10000863 973.79 true Example: select ToDateTime ( \"08/27/2018 08:30PM\" ) < \"2018-08-27T08:30\" ; result= false","title":"Relational"},{"location":"Operation/relational/#relational-operators","text":"A relational operator checks the relationship between two operands. The relational operators supported in IBPL include Equal (==), NotEqual (!=), LessThan (<), LessThanOrEqual (<=), GreaterThan (>), and GreaterThanOrEqual (>=).They each accept two value expressions as input and return a logical value. The inputs can be of type date, number or string.","title":"Relational Operators"},{"location":"Operation/relational/#equal","text":"The Equal Operator is represented by two equal signs (==). It accepts two inputs and returns true if they are the same, and false otherwise. Single equal to (=) is an assignment operator. So when you write a=b (instead of a==b ). It tries to assign the value stored in b to a instead of comparing both. When it is used in an argument expecting boolean results the query fails as a=b doesn't give boolean result. Example Result Select(1==1); true Select(1==2); false Select(\"String\"==\"String\"); true Select(\"String\"==\"String1\"); false Example: select ( 1 . 0 ) == \"1\" ; result= true Explaination: 1.0 is stored as a integer 1 and it is converted into string \"1\" before comparison Example: select ( 1 . 0 ) == \"1.0\" ; reult= false Explaination:Conversion of number to string removes the extraneous zero and decimal point. Example: select ( Version .[ Version Name ] * Product .[ ProductID ] * { Measure .[ UnitPrice ], ( Measure .[ UnitPrice ] == Measure .[ UnitPrice ]) as Transient . Result } ); result=true Explaination Version Name ProductID UnitPrice Result CurrentWorkingView FUR-BO-10001798 10,858 true CurrentWorkingView FUR-BO-10002545 10,671 true CurrentWorkingView FUR-BO-10002613 19,458 true Example: select ( Version .[ Version Name ] * Product .[ ProductID ] * { Measure .[ UnitPrice ], Measure .[ UnitCost ], ( Measure .[ UnitPrice ] == Measure .[ UnitCost ]) as Transient . Result } ); result: Version Name ProductID UnitPrice UnitCost Result CurrentWorkingView FUR-BO-10001798 10,858 10,000 false CurrentWorkingView FUR-BO-10002545 10,671 8,000 false CurrentWorkingView FUR-BO-10002613 19,458 18,000 false CurrentWorkingView FUR-BO-10004695 15,274 15,000 false CurrentWorkingView FUR-BO-10004834 12,091 12,000 false select ToDateTime ( \"08/27/2018 08:30PM\" ) == \"2018-08-27T20:30\" ; result=true Explaination:ToDateTime() function converts a string representing a date into a date value S.No. ToDateTime() Argument Comparison String Result 1 08/27/2018 2018-08-27T20:30 false 2 08/27/2018 08:30PM 2018-08-27 false 3 2018-08-27 2018-08-27T00:00 true 4 18-08-27 2018-08-27T00:00 ERROR! 5 27-08-2018 2018-08-27T00:00 ERROR! 6 27-Aug-2018 2018-08-27T00:00 true 7 August 27 2018 08:30 PM 2018-08-27T20:30 true Explanation If no time is mentioned ToDateTime takes time to be 00:00 Comparison string should be in the format yyyy-MM-ddThh:mm Year is written as yyyy thats why it recognise it to be year Server tries to map first no. to be month if its a 2 digit no. Server tries to map first no. to be month if its a 2 digit no. and it finds no mention of the month in words Since month has been written verbally","title":"Equal(==)"},{"location":"Operation/relational/#not-equal","text":"The Not Equal Operator is represented by exclamatory and an equal sign (!=). It accepts two inputs and returns false if they are the same, and true otherwise.(<>) can also be used as the NotEqual operator. Example Result Select(1!=1); false Select(1!=2); true Select(\"String\"!=\"String\"); false Select(\"String\"!=\"String1\"); true Example: Select ( 1 . 0 ) != \"1\" ; result=false Explaination: 1.0 is converted into string eqaul to \"1\" Example: Select ( 1 . 0 ) != \"1.0\" ; result=true Explaination: Conversion of number to string removes the extraneous zero and decimal point. Example: select ( Version .[ Version Name ] * Product .[ ProductID ] * { ( Measure .[ UnitPrice ] != Measure .[ UnitPrice ]) as Transient . Result } ); result: Version Name ProductID UnitPrice Result CurrentWorkingView FUR-BO-10001798 10,857.63 false CurrentWorkingView FUR-BO-10002545 10,671.23 false CurrentWorkingView FUR-BO-10002613 19,457.96 false Example: select ( Version .[ Version Name ] * Product .[ ProductID ] * { Measure .[ UnitPrice ], Measure .[ UnitCost ], ( Measure .[ UnitPrice ] != Measure .[ UnitCost ]) as Transient . Result } ); result: Explaination: Version Name ProductID UnitPrice UnitCost Result CurrentWorkingView FUR-BO-10001798 10,858 10,000 true CurrentWorkingView FUR-BO-10002545 10,671 8,000 true CurrentWorkingView FUR-BO-10002613 19,458 18,000 true CurrentWorkingView FUR-BO-10004695 15,274 15,000 true CurrentWorkingView FUR-BO-10004834 12,091 12,000 true Example: select ToDateTime ( \"08/27/2018 08:30PM\" ) != \"2018-08-27T08:30\" ; result=true Explaination:ToDateTime() function converts a string representing a date into a date value.so input 08/27/2018 08:30PM will give the result 2018-08-27T20:30 and not 2018-08-27T08:30 .","title":"Not Equal (!=)"},{"location":"Operation/relational/#less-than","text":"The less than operand is represented by (<) sign. It accepts two inputs and returns true if the first is strictly less than the second, and false otherwise. Example Result Select(1<1); false Select(1<2); true Select(\"String\"<\"String\") false Select(\"String<\"String1\") true Example Select ( 1 . 0 ) < \"1\" ; result= false Explaination: 1.0 is converted to a string equal to 1 which in case can not be less than 1. Example: select ( 11 ) < \"2\" ; result= true Explaination: the number is converted to the string \u201c11\u201d which is less than \u201c2\u201d) Example: select ( Version .[ Version Name ] * Product .[ ProductID ] * { Measure .[ UnitPrice ], ( Measure .[ UnitPrice ] < 8000 ) as Transient . Result } ); result: Version Name ProductID UnitPrice Result CurrentWorkingView FUR-BO-10001798 10,857.63 false CurrentWorkingView FUR-BO-10002545 10,671.23 false CurrentWorkingView FUR-CH-10000454 578.92 true CurrentWorkingView FUR-CH-10000513 964.06 true CurrentWorkingView FUR-CH-10000863 973.79 true Example: select ToDateTime ( \"08/27/2018 08:30PM\" ) < \"2018-08-27T08:30\" ; result= false","title":"Less Than(&lt;)"},{"location":"top-level/Introduction/","text":"Introduction IBPL stands for \"Integrated Business Planning Language\". It is used to access and manipulate data and meta-data in the GraphCube engine (also known as LiveServer). The ibpl structure is broadly classified as Rules: In the Rules language, IBPL is used to create named sets, set active rules for measures, define procedures and plug-ins, and create security rules. There are multiple rules files contained in the tenant/Configuration database and managed through th econfiguration UI. They are read and executed as a part of the startup process. All these will be in the section of IBPL usages Commands: In the Command language, IBPL is used to execute commands and queries on the GraphCube engine. The command language is used after the GraphCube engine has been started. There are three main ways it can be used: Commands can be executed in an interactive manner through one of the available clients (IBPLPlus, Meru, HTML UI). Commands can also be contained in a script (text file) that is sent to GraphCube engine for execution by the IBPLPlus client Commands can be contained in action buttons that are executed by users in the HTML UI or Excel UI. This is more Command Oriented IBPL capabilities Querying data - Access data filtered and ordered as required for validation and verification. Usually the number of rows fetched will be few. If the number of rows is large one should transfer data using files for download. Modifying data - Update member data and run computations to update measures or edges. Usually large amount of measure data is updated. Actual scope statements are tested before converting them to active rules. Members, versions and measures could also be surgically manipulated. Transferring data - Upload or download member and measure data as files. Usually a large number of rows are fetched or uploaded. Querying model - Extract dimensions, measures, graphs etc. and their modelling details for the purposes of verification. Controlling access - create rules to grant or deny access to various types of data. Important Notations [\u2026] Square Bracket are used to contain names of Dimension, Attributes, Measures. It's usage is same as \"\u2026\" (Double Inverted Commas) . It is used to chain together functions and objects","title":"Introduction"},{"location":"top-level/Introduction/#introduction","text":"IBPL stands for \"Integrated Business Planning Language\". It is used to access and manipulate data and meta-data in the GraphCube engine (also known as LiveServer). The ibpl structure is broadly classified as Rules: In the Rules language, IBPL is used to create named sets, set active rules for measures, define procedures and plug-ins, and create security rules. There are multiple rules files contained in the tenant/Configuration database and managed through th econfiguration UI. They are read and executed as a part of the startup process. All these will be in the section of IBPL usages Commands: In the Command language, IBPL is used to execute commands and queries on the GraphCube engine. The command language is used after the GraphCube engine has been started. There are three main ways it can be used: Commands can be executed in an interactive manner through one of the available clients (IBPLPlus, Meru, HTML UI). Commands can also be contained in a script (text file) that is sent to GraphCube engine for execution by the IBPLPlus client Commands can be contained in action buttons that are executed by users in the HTML UI or Excel UI. This is more Command Oriented","title":"Introduction"},{"location":"top-level/Introduction/#ibpl-capabilities","text":"Querying data - Access data filtered and ordered as required for validation and verification. Usually the number of rows fetched will be few. If the number of rows is large one should transfer data using files for download. Modifying data - Update member data and run computations to update measures or edges. Usually large amount of measure data is updated. Actual scope statements are tested before converting them to active rules. Members, versions and measures could also be surgically manipulated. Transferring data - Upload or download member and measure data as files. Usually a large number of rows are fetched or uploaded. Querying model - Extract dimensions, measures, graphs etc. and their modelling details for the purposes of verification. Controlling access - create rules to grant or deny access to various types of data. Important Notations [\u2026] Square Bracket are used to contain names of Dimension, Attributes, Measures. It's usage is same as \"\u2026\" (Double Inverted Commas) . It is used to chain together functions and objects","title":"IBPL capabilities"},{"location":"top-level/terminology/","text":"Terminology Dimension Data Simply a dimension data is the data which is represented in the rows of the data sheet e.g. Name, Address, OrderIDs etc. dimension data is not involved in calculation instaed calculations are shown against it. The following terms are used to describe entities which holds dimension data. Dimensions A dimension is an entity such as \"Product\" or \"Customer\" that can be used to describe some facet of business planning data. For example, a sales forecast may be described using dimensions like Product, Sales Domain and Time, whereas a budget may be described using dimensions like Spend Domain and Time. A Product Dimension Conatins all data related to products Attribute and attribute property Attribute can either refer to an attribute of the dimension that defines a level in a hierarchy, and it is known as LevelAttribute. For e.g. Product Dimension stores attributes like ProductID, size, SKU, Classification, Category, SubCategory Attribute Properties are defined for members based on level. These have one to one relation with attribute members. For eg Each ProductID will have one image which no other ProductID would have. It is not compulsory to define properties for each and every attributes. In other words, a property like \"Image\" may be defined for members in the \"Product Name\" level, but not for \"Category\" or \"Sub-Category\" members. Another property, like \"Category Image\" may be defined for members in the \"Category\" level, but not members of other levels. Member As the name suggests a member is a specific instance (a member) of an attribute in a dimension. For example, 'FUR-CH-10000454' is a member under attribute ProductID in dimension Product. A member is also referred to as an AttributeMember. There are some default dimensions in o9 platform like: Version: As the name suggest it helps in the management of different version of data and to manage scenarios. There is always by default Version called CurrentWorkingView (CWV), which represent the plan of record. Scenarios are dynamic versions that are used to evaluate some scenario or perform some what-if analysis. Saved versions are snapshots of the CWV taken at some time in the past and cannot be edited.In the Version dimension, the Key is an integer. The value of zero is reserved for the CWV. A negative value for Key indicates that the version is a \u2018scenario\u2019 or \u2018what-if\u2019 version. A positive value for Key indicates that the version is an archived snapshot of the plan Dim plugin: Algorithm: Personnel:","title":"Terminology"},{"location":"top-level/terminology/#terminology","text":"","title":"Terminology"},{"location":"top-level/terminology/#dimension-data","text":"Simply a dimension data is the data which is represented in the rows of the data sheet e.g. Name, Address, OrderIDs etc. dimension data is not involved in calculation instaed calculations are shown against it. The following terms are used to describe entities which holds dimension data.","title":"Dimension Data"},{"location":"top-level/terminology/#dimensions","text":"A dimension is an entity such as \"Product\" or \"Customer\" that can be used to describe some facet of business planning data. For example, a sales forecast may be described using dimensions like Product, Sales Domain and Time, whereas a budget may be described using dimensions like Spend Domain and Time. A Product Dimension Conatins all data related to products","title":"Dimensions"},{"location":"top-level/terminology/#attribute-and-attribute-property","text":"Attribute can either refer to an attribute of the dimension that defines a level in a hierarchy, and it is known as LevelAttribute. For e.g. Product Dimension stores attributes like ProductID, size, SKU, Classification, Category, SubCategory Attribute Properties are defined for members based on level. These have one to one relation with attribute members. For eg Each ProductID will have one image which no other ProductID would have. It is not compulsory to define properties for each and every attributes. In other words, a property like \"Image\" may be defined for members in the \"Product Name\" level, but not for \"Category\" or \"Sub-Category\" members. Another property, like \"Category Image\" may be defined for members in the \"Category\" level, but not members of other levels.","title":"Attribute and attribute property"},{"location":"top-level/terminology/#member","text":"As the name suggests a member is a specific instance (a member) of an attribute in a dimension. For example, 'FUR-CH-10000454' is a member under attribute ProductID in dimension Product. A member is also referred to as an AttributeMember. There are some default dimensions in o9 platform like: Version: As the name suggest it helps in the management of different version of data and to manage scenarios. There is always by default Version called CurrentWorkingView (CWV), which represent the plan of record. Scenarios are dynamic versions that are used to evaluate some scenario or perform some what-if analysis. Saved versions are snapshots of the CWV taken at some time in the past and cannot be edited.In the Version dimension, the Key is an integer. The value of zero is reserved for the CWV. A negative value for Key indicates that the version is a \u2018scenario\u2019 or \u2018what-if\u2019 version. A positive value for Key indicates that the version is an archived snapshot of the plan Dim plugin: Algorithm: Personnel:","title":"Member"},{"location":"transforming-data/querying/","text":"Querying Select Example Select ( [ Product ].[ ProductID ] * [ Time ].[ Week ] * { Measure .[ UnitSold ], Measure .[ UnitPrice ] } ) where { Version .[ Version Name ]. Filter ( # . Key == 0 ) } orderby Measure .[ UnitPrice ] desc limit 6 ; Result: ProductID Week UnitSold UnitPrice TEC-AC-10001767 5 3 137,076 TEC-MA-10001148 3 2 123,543 TEC-MA-10000864 4 4 102,922 FUR-FU-10002505 2 1 98,015 TEC-AC-10004659 1 3 93,606 FUR-FU-10003773 3 9 93,051 The code contains following parts [Product].[ProductID] * [Time].[Week] * : It defines scope or granularity against which measure data has to be represented. In the report first column will have all the ProductID and second column will have the Week corresponding to it. All the attributes need to be appended by * They are written as [Dimension].[Attribute] Version in granularity in necessary otherwise 0 rows will be shown. Here it is used in where clause. {Measure.[UnitSold], Measure.[UnitPrice]} : It defines the measures which are represented against above defined scope. It will show the UnitPrice and UnitSold for the particular ProductID and in particular week. Measure. has to be prepended before measure names and measure names should be in Square Bracket where {Version.[Version Name].Filter(#.Key == 0)} : where command is used to limit the scope of selection. Here only selection is for only those Version whoose [Version Name] MemberKey is 0 (CurrentWorkingView). Key is the unique no. assigned to every attributemember. Other than Key, Name can be used to find the exact attributemember if the key is unknown Filter This command filters the data according to query specified in the paratheses() # is used here to represent Version.[Version Name] on which filter query has been applied orderby Measure.[UnitPrice] desc : It is used to order the list by UnitPrice. Generally orderby orders the list in ascending order. desc has to be appended if list is required in descending order limit 6 : It is used get only 6 rows of the result. top and bottom can be used instead of limit to display top and bottom n rows respectively. This is the basic statement which is used to Query data and one complete select statement ends with ; . So it doesn't matter if it is written in one single line or multiple lines. (1) & (2) are compulsary (3),(4) and (5) are optional. Select ([ Product ].[ ProductID ] * [ Time ].[ Week ]) on row , ( { Measure .[ UnitSold ], Measure .[ UnitPrice ] } ) on column where { Version .[ Version Name ]. Filter ( # . Key == 0 ) } ; OR Select ([ Product ].[ ProductID ] * [ Time ].[ Week ] * Version .[ Version Name ]) on row , ( { Measure .[ UnitSold ], Measure .[ UnitPrice ] } ) on column ; This code is equivalent to earlier code with just parts (1), (2) and (3). Current usage is shown in the syntax but it is more vast. And how to convert to one to another. SYNTAX : Select ( < rows > ) on row , ( { < columns > } ) on column ; SYNTAX : Select ( < rows >* { < columns > } ); Select () on row, () on column Basic Usage Select ([ Product ].[ ProductID ] * [ Time ].[ Week ] * Version .[ Version Name ]) on row , ( { Measure .[ UnitSold ], Measure .[ UnitPrice ] } ) on column ; Above example can also be written as Select ([ Product ].[ ProductID ] * [ Time ].[ Week ] * Version .[ Version Name ] * { Measure .[ UnitSold ], Measure .[ UnitPrice ] } ) on row , () on column ; Dimension, Attribute Members select ( Customer .[ CustomerID ]) on row , () on column ; Result: All members of Attribute CustomerID are displayed CustomerID AA-10480 AD-10180 AG-10270 \u2026 97 more rows select ( Customer .[ CustomerID ] * Customer .[ CustomerName ] * Customer .[ City ] * Customer .[ State ]) on row , () on column ; Result: CustomerID CustomerName City State AA-10480 Atish Awasthi Bareilly Uttar Pradesh AD-10180 Ashish Dungdung Pune Maharashtra AG-10270 Akash Gowtham Tirupati Andhra Pradesh AM-10360 Aarush Mittal Valsad Gujarat \u2026 96 more rows Simple Usages Print Statement select ( \"Hello IBPL\" ); Result: Hello IBPL select ( 5 + 3 * 2 ); Result: 11 Querying Model Select _Schema select _Schema is used when we have to query details about model. There 3 types of _Schema Querying _SchemaDimension _SchemaPlan _SchemaRelationship Select _SchemaDimension _Dimension Select [ _SchemaDimension ].[ _Dimension ]; Key Name DisplayName Image IsEditable MemberProperties 7f88ba04-7b7e-4065-96cb-872d232a2af5 Algorithm Algorithm false true [{\"ValueDataType\":\"string\", \"PropertyValue\":\"DimAl \u2026 77fe1241-2c33-4341-bb0c-a21edd6b152d Customer Customer false true [{\"ValueDataType\":\"string\", \"PropertyValue\":\"DimCu \u2026 \u20266 more rows _Attribute Select [ _SchemaDimension ].[ _Attribute ]; Key Name DisplayName Image IsEditable MemberProperties 56d48169-3f06-4b39-a6b3-864bbee2cae2 [Algorithm].[Algorithm Category] [Algorithm].[Algorithm Category] true [{\"ValueDataType\"\u2026 f5bef5d1-1e51-4ce0-b679-0de99cda8e9d [Algorithm].[Algorithm Instance] [Algorithm].[Algorithm Instance] true [{\"ValueDataType\"\u2026 \u2026 18 more rows _Property Select [ _SchemaDimension ].[ _Property ]; Key Name DisplayName Image IsEditable 3227a977-c67f-48d0-8765-4e458762306e [Algorithm].[Algorithm Category$DisplayName] [Algorithm].[Algorithm Category$DisplayName] true 0403ccf9-0fb5-4778-bf00-b582bb69e645 [Algorithm].[Algorithm Category$InActive] [Algorithm].[Algorithm Category$InActive] true \u2026 70 more rows _Hierarchy Select [ _SchemaDimension ].[ _Hierarchy ]; Key Name DisplayName Image IsEditable 027326fe-1ced-4393-9fd5-6684fc0d5058 [Algorithm].[Algorithm Hierarchy] [Algorithm].[Algorithm Hierarchy] true 3526648a-bcc5-49f5-8c3d-2fc16960a025 [Customer].[Customer Hierarchy] [Customer].[Customer Hierarchy] true bf1c10e0-a78e-4334-987b-73f5e2c72879 [DimPlugin].[Plugin Hierarchy] [DimPlugin].[Plugin Hierarchy] true c0065eb2-2de4-414f-be6c-6bffd3e0bc80 [Product].[Product] [Product].[Product] true 0b2386f7-9907-47db-8385-879c1722bfdb [Time].[Time Hierarchy] [Time].[Time Hierarchy] true _Level Select [ _SchemaDimension ].[ _Level ]; Key Name DisplayName Image IsEditable f4c1fe86-5474-416d-aa7b-df9f16962a40 [Algorithm Hierarchy].[Algorithm Category] [Algorithm Hierarchy].[Algorithm Category] true 15d65f35-7c19-4af1-82b8-4e9d11ca3049 [Algorithm Hierarchy].[Algorithm Instance] [Algorithm Hierarchy].[Algorithm Instance] true \u2026 13 more rows Special Usages To find within a dimension [Dimension-Attribute-Property]: [_Dimension] \u2192 [_Attribute] \u2192 [_Property] [Dimension-Hierarchy-Level]: [_Dimension] \u2192 [_Hierarchy] \u2192 [_Level] [Dimension-Attribute-Level]: [_Dimension] \u2192 [_Attribute] \u2192 [_Level] These have to enclosed in Children Function Examples related to Product dimension SELECT _SchemaDimension .[ _Dimension ].[ Product ]. Children ( _SchemaDimension .[ Dimension - Attribute - Property ]); It will print the Dimension, Attribute Product Dimension SELECT _SchemaDimension .[ _Dimension ].[ Product ]. Children ( _SchemaDimension .[ Dimension - Hierarchy - Level ]); It will print Hierarchy of Product Dimension Select _SchemaPlan S.No. Command Result 1 select [_SchemaPlan].[_Plan]; Prints all the plans 2 select [_SchemaPlan].[_MeasureGroup]; Prints all MeasureGroups 3 select [_SchemaPlan].[_Measure]; Prints all the Measures 4 select [_SchemaPlan].[_DimensionUsage]; Prints the dimensions that are grained in the measures Select _SchemaRelationship","title":"Querying"},{"location":"transforming-data/querying/#querying","text":"","title":"Querying"},{"location":"transforming-data/querying/#select","text":"Example Select ( [ Product ].[ ProductID ] * [ Time ].[ Week ] * { Measure .[ UnitSold ], Measure .[ UnitPrice ] } ) where { Version .[ Version Name ]. Filter ( # . Key == 0 ) } orderby Measure .[ UnitPrice ] desc limit 6 ; Result: ProductID Week UnitSold UnitPrice TEC-AC-10001767 5 3 137,076 TEC-MA-10001148 3 2 123,543 TEC-MA-10000864 4 4 102,922 FUR-FU-10002505 2 1 98,015 TEC-AC-10004659 1 3 93,606 FUR-FU-10003773 3 9 93,051 The code contains following parts [Product].[ProductID] * [Time].[Week] * : It defines scope or granularity against which measure data has to be represented. In the report first column will have all the ProductID and second column will have the Week corresponding to it. All the attributes need to be appended by * They are written as [Dimension].[Attribute] Version in granularity in necessary otherwise 0 rows will be shown. Here it is used in where clause. {Measure.[UnitSold], Measure.[UnitPrice]} : It defines the measures which are represented against above defined scope. It will show the UnitPrice and UnitSold for the particular ProductID and in particular week. Measure. has to be prepended before measure names and measure names should be in Square Bracket where {Version.[Version Name].Filter(#.Key == 0)} : where command is used to limit the scope of selection. Here only selection is for only those Version whoose [Version Name] MemberKey is 0 (CurrentWorkingView). Key is the unique no. assigned to every attributemember. Other than Key, Name can be used to find the exact attributemember if the key is unknown Filter This command filters the data according to query specified in the paratheses() # is used here to represent Version.[Version Name] on which filter query has been applied orderby Measure.[UnitPrice] desc : It is used to order the list by UnitPrice. Generally orderby orders the list in ascending order. desc has to be appended if list is required in descending order limit 6 : It is used get only 6 rows of the result. top and bottom can be used instead of limit to display top and bottom n rows respectively. This is the basic statement which is used to Query data and one complete select statement ends with ; . So it doesn't matter if it is written in one single line or multiple lines. (1) & (2) are compulsary (3),(4) and (5) are optional. Select ([ Product ].[ ProductID ] * [ Time ].[ Week ]) on row , ( { Measure .[ UnitSold ], Measure .[ UnitPrice ] } ) on column where { Version .[ Version Name ]. Filter ( # . Key == 0 ) } ; OR Select ([ Product ].[ ProductID ] * [ Time ].[ Week ] * Version .[ Version Name ]) on row , ( { Measure .[ UnitSold ], Measure .[ UnitPrice ] } ) on column ; This code is equivalent to earlier code with just parts (1), (2) and (3). Current usage is shown in the syntax but it is more vast. And how to convert to one to another. SYNTAX : Select ( < rows > ) on row , ( { < columns > } ) on column ; SYNTAX : Select ( < rows >* { < columns > } );","title":"Select"},{"location":"transforming-data/querying/#select-on-row-on-column","text":"","title":"Select () on row, () on column"},{"location":"transforming-data/querying/#basic-usage","text":"Select ([ Product ].[ ProductID ] * [ Time ].[ Week ] * Version .[ Version Name ]) on row , ( { Measure .[ UnitSold ], Measure .[ UnitPrice ] } ) on column ; Above example can also be written as Select ([ Product ].[ ProductID ] * [ Time ].[ Week ] * Version .[ Version Name ] * { Measure .[ UnitSold ], Measure .[ UnitPrice ] } ) on row , () on column ;","title":"Basic Usage"},{"location":"transforming-data/querying/#dimension-attribute-members","text":"select ( Customer .[ CustomerID ]) on row , () on column ; Result: All members of Attribute CustomerID are displayed CustomerID AA-10480 AD-10180 AG-10270 \u2026 97 more rows select ( Customer .[ CustomerID ] * Customer .[ CustomerName ] * Customer .[ City ] * Customer .[ State ]) on row , () on column ; Result: CustomerID CustomerName City State AA-10480 Atish Awasthi Bareilly Uttar Pradesh AD-10180 Ashish Dungdung Pune Maharashtra AG-10270 Akash Gowtham Tirupati Andhra Pradesh AM-10360 Aarush Mittal Valsad Gujarat \u2026 96 more rows","title":"Dimension, Attribute Members"},{"location":"transforming-data/querying/#simple-usages","text":"","title":"Simple Usages"},{"location":"transforming-data/querying/#print-statement","text":"select ( \"Hello IBPL\" ); Result: Hello IBPL select ( 5 + 3 * 2 ); Result: 11","title":"Print Statement"},{"location":"transforming-data/querying/#querying-model","text":"","title":"Querying Model"},{"location":"transforming-data/querying/#select-_schema","text":"select _Schema is used when we have to query details about model. There 3 types of _Schema Querying _SchemaDimension _SchemaPlan _SchemaRelationship","title":"Select _Schema"},{"location":"transforming-data/querying/#select-_schemadimension","text":"","title":"Select _SchemaDimension"},{"location":"transforming-data/querying/#_dimension","text":"Select [ _SchemaDimension ].[ _Dimension ]; Key Name DisplayName Image IsEditable MemberProperties 7f88ba04-7b7e-4065-96cb-872d232a2af5 Algorithm Algorithm false true [{\"ValueDataType\":\"string\", \"PropertyValue\":\"DimAl \u2026 77fe1241-2c33-4341-bb0c-a21edd6b152d Customer Customer false true [{\"ValueDataType\":\"string\", \"PropertyValue\":\"DimCu \u2026 \u20266 more rows","title":"_Dimension"},{"location":"transforming-data/querying/#_attribute","text":"Select [ _SchemaDimension ].[ _Attribute ]; Key Name DisplayName Image IsEditable MemberProperties 56d48169-3f06-4b39-a6b3-864bbee2cae2 [Algorithm].[Algorithm Category] [Algorithm].[Algorithm Category] true [{\"ValueDataType\"\u2026 f5bef5d1-1e51-4ce0-b679-0de99cda8e9d [Algorithm].[Algorithm Instance] [Algorithm].[Algorithm Instance] true [{\"ValueDataType\"\u2026 \u2026 18 more rows","title":"_Attribute"},{"location":"transforming-data/querying/#_property","text":"Select [ _SchemaDimension ].[ _Property ]; Key Name DisplayName Image IsEditable 3227a977-c67f-48d0-8765-4e458762306e [Algorithm].[Algorithm Category$DisplayName] [Algorithm].[Algorithm Category$DisplayName] true 0403ccf9-0fb5-4778-bf00-b582bb69e645 [Algorithm].[Algorithm Category$InActive] [Algorithm].[Algorithm Category$InActive] true \u2026 70 more rows","title":"_Property"},{"location":"transforming-data/querying/#_hierarchy","text":"Select [ _SchemaDimension ].[ _Hierarchy ]; Key Name DisplayName Image IsEditable 027326fe-1ced-4393-9fd5-6684fc0d5058 [Algorithm].[Algorithm Hierarchy] [Algorithm].[Algorithm Hierarchy] true 3526648a-bcc5-49f5-8c3d-2fc16960a025 [Customer].[Customer Hierarchy] [Customer].[Customer Hierarchy] true bf1c10e0-a78e-4334-987b-73f5e2c72879 [DimPlugin].[Plugin Hierarchy] [DimPlugin].[Plugin Hierarchy] true c0065eb2-2de4-414f-be6c-6bffd3e0bc80 [Product].[Product] [Product].[Product] true 0b2386f7-9907-47db-8385-879c1722bfdb [Time].[Time Hierarchy] [Time].[Time Hierarchy] true","title":"_Hierarchy"},{"location":"transforming-data/querying/#_level","text":"Select [ _SchemaDimension ].[ _Level ]; Key Name DisplayName Image IsEditable f4c1fe86-5474-416d-aa7b-df9f16962a40 [Algorithm Hierarchy].[Algorithm Category] [Algorithm Hierarchy].[Algorithm Category] true 15d65f35-7c19-4af1-82b8-4e9d11ca3049 [Algorithm Hierarchy].[Algorithm Instance] [Algorithm Hierarchy].[Algorithm Instance] true \u2026 13 more rows","title":"_Level"},{"location":"transforming-data/querying/#special-usages","text":"To find within a dimension [Dimension-Attribute-Property]: [_Dimension] \u2192 [_Attribute] \u2192 [_Property] [Dimension-Hierarchy-Level]: [_Dimension] \u2192 [_Hierarchy] \u2192 [_Level] [Dimension-Attribute-Level]: [_Dimension] \u2192 [_Attribute] \u2192 [_Level] These have to enclosed in Children Function Examples related to Product dimension SELECT _SchemaDimension .[ _Dimension ].[ Product ]. Children ( _SchemaDimension .[ Dimension - Attribute - Property ]); It will print the Dimension, Attribute Product Dimension SELECT _SchemaDimension .[ _Dimension ].[ Product ]. Children ( _SchemaDimension .[ Dimension - Hierarchy - Level ]); It will print Hierarchy of Product Dimension","title":"Special Usages"},{"location":"transforming-data/querying/#select-_schemaplan","text":"S.No. Command Result 1 select [_SchemaPlan].[_Plan]; Prints all the plans 2 select [_SchemaPlan].[_MeasureGroup]; Prints all MeasureGroups 3 select [_SchemaPlan].[_Measure]; Prints all the Measures 4 select [_SchemaPlan].[_DimensionUsage]; Prints the dimensions that are grained in the measures","title":"Select _SchemaPlan"},{"location":"transforming-data/querying/#select-_schemarelationship","text":"","title":"Select _SchemaRelationship"}]}